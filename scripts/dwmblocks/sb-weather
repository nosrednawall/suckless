#!/bin/bash

# Carrega informacoes do modo de operacao
arquivo_modo="$HOME/.cache/dwmblocks_modo_operacao"
if [ -f $arquivo_modo ]; then
    source $arquivo_modo
else
    OPERATION_MODE="COMPLETO"
fi

# Carrega tema
source ~/.theme_selected

# Configurações do script
API_KEY="8b05d62206f459e1d298cbe5844d7d87"
UNITS="metric"  # Use 'imperial' para Fahrenheit
LANG="pt_br"    # Idioma da descrição do tempo

# Função para obter a localização atual (latitude e longitude)
get_location() {
    LOCATION=$(curl -sf "http://ip-api.com/json/")
    if [ -z "$LOCATION" ]; then
        echo "Erro: Não foi possível obter a localização."
        exit 1
    fi
    LAT=$(echo "$LOCATION" | jq -r '.lat')
    LON=$(echo "$LOCATION" | jq -r '.lon')
}

# Função para obter o nome da cidade com base nas coordenadas
get_city_name() {
    CITY_DATA=$(curl -sf "http://api.openweathermap.org/geo/1.0/reverse?lat=${LAT}&lon=${LON}&limit=1&appid=${API_KEY}")
    if [ -z "$CITY_DATA" ]; then
        echo "Erro: Não foi possível obter o nome da cidade."
        exit 1
    fi
    CITY=$(echo "$CITY_DATA" | jq -r '.[0].name')
    COUNTRY=$(echo "$CITY_DATA" | jq -r '.[0].country')
    CITY="${CITY},${COUNTRY}"
}

# Obtém a localização e o nome da cidade
get_location
get_city_name

# Substitui espaços por %20 na cidade
CITY_ENCODED=$(echo "$CITY" | sed 's/ /%20/g')

# Monta a URL da API
URL="http://api.openweathermap.org/data/2.5/weather?q=${CITY_ENCODED}&appid=${API_KEY}&units=${UNITS}&lang=${LANG}"

# Requisição e processamento
WEATHER=$(curl -sf "$URL")

# Separa a informacao recebida em variaveis
WEATHER_DESC=$(echo "$WEATHER" | jq -r ".weather[0].description")
WEATHER_TEMP=$(echo "$WEATHER" | jq ".main.temp" | cut -d "." -f 1)
WEATHER_ICON_CODE=$(echo "$WEATHER" | jq -r ".weather[].icon" | head -1)
WEATHER_FEELS_LIKE=$(echo "$WEATHER" | jq ".main.feels_like" | cut -d "." -f 1)
WEATHER_ICON=""
WEATHER_HEX=""

case $WEATHER_ICON_CODE in
    "01d")
        WEATHER_ICON=""
        #WEATHER_HEX="#ffd86b"
        WEATHER_HEX="$COLOR_1"
        ;;
    "01n")
        WEATHER_ICON=""
        #WEATHER_HEX="#fcdcf6"
        WEATHER_HEX="$COLOR_4"
        ;;
    "02d")
        #WEATHER_ICON=""
        WEATHER_ICON=""
        #WEATHER_HEX="#adadff"
        WEATHER_HEX="$COLOR_6"
        ;;
    "02n")
        WEATHER_ICON=""
        #WEATHER_HEX="#adadff"
        WEATHER_HEX="$COLOR_6"
        ;;
    "03d")
        WEATHER_ICON=""
        #WEATHER_HEX="#adadff"
        WEATHER_HEX="$COLOR_6"
        ;;
    "03n")
        WEATHER_ICON=""
        #WEATHER_HEX="#adadff"
        WEATHER_HEX="$COLOR_6"
        ;;
    "04d")
        WEATHER_ICON=""
        #WEATHER_HEX="#adadff"
        WEATHER_HEX="$COLOR_6"
        ;;
    "04n")
        WEATHER_ICON=""
        #WEATHER_HEX="#acb0d0"
        WEATHER_HEX="$COLOR_8"
        ;;
    "09d")
        WEATHER_ICON=""
        #WEATHER_HEX="#6b95ff"
        WEATHER_HEX="$COLOR_5"
        ;;
    "09n")
        WEATHER_ICON=""
        #WEATHER_HEX="#6b95ff"
        WEATHER_HEX="$COLOR_5"
        ;;
    "10d")
        WEATHER_ICON=""
        #WEATHER_HEX="#6b95ff"
        WEATHER_HEX="$COLOR_5"
        ;;
    "10n")
        WEATHER_ICON=""
        #WEATHER_HEX="#6b95ff"
        WEATHER_HEX="$COLOR_5"
        ;;
    "11d")
        WEATHER_ICON=""
        #WEATHER_HEX="#ffeb57"
        WEATHER_HEX="$COLOR_1"
        ;;
    "11n")
        WEATHER_ICON=""
        #WEATHER_HEX="#ffeb57"
        WEATHER_HEX="$COLOR_1"
        ;;
    "13d")
        WEATHER_ICON=""
        #WEATHER_HEX="#e3e6fc"
        WEATHER_HEX="$COLOR_8"
        ;;
    "13n")
        WEATHER_ICON=""
        #WEATHER_HEX="#e3e6fc"
        WEATHER_HEX="$COLOR_8"
        ;;
    "40d")
        WEATHER_ICON=""
        #WEATHER_HEX="#84afdb"
        WEATHER_HEX="$COLOR_5"
        ;;
    "40n")
        WEATHER_ICON=""
        #WEATHER_HEX="#84afdb"
        WEATHER_HEX="$COLOR_5"
        ;;
    "50d")
        WEATHER_ICON=""
        #WEATHER_HEX="#84afdb"
        WEATHER_HEX="$COLOR_5"
        ;;
    "50n")
        WEATHER_ICON=""
        #WEATHER_HEX="#84afdb"
        WEATHER_HEX="$COLOR_5"
        ;;
    *)
        WEATHER_ICON=""
        #WEATHER_HEX="#adadff"
        WEATHER_HEX="$COLOR_4"
        ;;
esac

# Extrair informações do JSON usando jq
CITY=$(echo "$WEATHER" | jq -r '.name')
DESCRIPTION=$(echo "$WEATHER" | jq -r '.weather[0].description')
TEMP=$(echo "$WEATHER" | jq -r '.main.temp')
FEELS_LIKE=$(echo "$WEATHER" | jq -r '.main.feels_like')
HUMIDITY=$(echo "$WEATHER" | jq -r '.main.humidity')
WIND_SPEED=$(echo "$WEATHER" | jq -r '.wind.speed')
PRESSURE=$(echo "$WEATHER" | jq -r '.main.pressure')

# Lógica para identificar se a pressão é alta ou baixa
if (( $(echo "$PRESSURE > 1013.25" | bc -l) )); then
    PRESSURE_STATUS="alta"
else
    PRESSURE_STATUS="baixa"
fi

# Formatar a mensagem
MESSAGE="Previsão do tempo para $CITY:
- Condição: $DESCRIPTION
- Temperatura: $TEMP°C (Sensação: $FEELS_LIKE°C)
- Umidade: $HUMIDITY%
- Vento: $WIND_SPEED m/s
- Pressão Atmosférica: $PRESSURE hPa ($PRESSURE_STATUS)"

# funcoes cliclaveis
case $BUTTON in
    1) notify-send "Informação da previsão do tempo" "$MESSAGE" ;;
	6) setsid -f st -e emacs -nw "$0" ;;
esac

# Apresentacao condicionada
case "$OPERATION_MODE" in
    "MINIMO")
        echo ""
    ;;
    "MEDIO")
        echo ""
    ;;
    *)
        if [ "$WEATHER" != "" ]; then
            echo "^c$WEATHER_HEX^$WEATHER_ICON^d^ $WEATHER_TEMP°C $WEATHER_DESC  "
        else
            echo ""
        fi
    ;;
esac
